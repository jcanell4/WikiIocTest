<?php

require_once 'DokuModelAdapterTestCase.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-01 at 02:25:01.
 */
class DokuModelAdapterTest extends DokuModelAdapterTestCase {

    public function __construct($name = "DokuModelAdapterTest") {
        parent::__construct($name);
    }

    private function showParameters($funcName, $resp) {
        print "PARAMETRES DE: " . $funcName . "\n";
        foreach ($resp as $key => $value) {
            print $key . " : " . $value . "\n";
        }
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @test getHtmlPageTest
     */
    public function getHtmlPageTest() {
        $page = "prv:unfitxer";
        $id_page = str_replace(":", "_", $page);
        $title = $page;
        try {
            $resp = $this->getDokuModelAdapter()->getHtmlPage($page);
            $this->assertEquals($resp['id'], $id_page);
            $this->assertEquals($resp["ns"], $page);
            $this->assertEquals($resp["title"], $title);
            $this->assertArrayHasKey("content", $resp);
            print $resp["content"];
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        } catch (PageNotFoundException $e) {
            $this->assertFalse(FALSE);
        }


        $page = "noexisteix";
        $id_page = str_replace(":", "_", $page);
        $title = $page;
        try {
            $resp = $this->getDokuModelAdapter()->getHtmlPage($page);
            $this->assertEquals($resp['id'], $id_page);
            $this->assertEquals($resp["ns"], $page);
            $this->assertEquals($resp["title"], $title);
            $this->assertArrayHasKey("content", $resp);
            print $resp["content"];
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        } catch (PageNotFoundException $e) {
            $this->assertFalse(FALSE);
        }
    }

    /**
     * @test getCodePageTest
     */
    public function getCodePageTest() {
        $page = "prv:unfitxer";
        $id_page = str_replace(":", "_", $page);
        $title = $page;
        try {
            $resp = $this->getDokuModelAdapter()->getCodePage($page);
            $this->showParameters("getCodePageTest", $resp);
            $this->assertEquals($resp['id'], $id_page);
            $this->assertEquals($resp["ns"], $page);
            $this->assertEquals($resp["title"], $title);
            $this->assertArrayHasKey("content", $resp);
            print $resp["content"];
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        } catch (PageNotFoundException $e) {
            $this->assertFalse(FALSE);
        }

        $page = "noexisteix";
        $id_page = str_replace(":", "_", $page);
        $title = $page;
        try {
            $resp = $this->getDokuModelAdapter()->getCodePage($page);
            $this->assertEquals($resp['id'], $id_page);
            $this->assertEquals($resp["ns"], $page);
            $this->assertEquals($resp["title"], $title);
            $this->assertArrayHasKey("content", $resp);
            print $resp["content"];
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        } catch (PageNotFoundException $e) {
            $this->assertFalse(FALSE);
        }
    }

    /**
     * @test cancelEditionTest
     */
    public function cancelEditionTest() {
        $page = "prv:unfitxer";
        $id_page = str_replace(":", "_", $page);
        $title = $page;
        try {
            $resp = $this->getDokuModelAdapter()->cancelEdition($page);
            $this->showParameters("cancelEditionTest", $resp);
            $this->assertEquals($resp['id'], $id_page);
            $this->assertEquals($resp["ns"], $page);
            $this->assertEquals($resp["title"], $title);
            $this->assertArrayHasKey("content", $resp);
            print $resp["content"];
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        } catch (PageNotFoundException $e) {
            $this->assertFalse(TRUE);
        }

        $page = "noexisteix";
        $id_page = str_replace(":", "_", $page);
        $title = $page;
        try {
            $resp = $this->getDokuModelAdapter()->cancelEdition($page);
            $this->assertEquals($resp['id'], $id_page);
            $this->assertEquals($resp["ns"], $page);
            $this->assertEquals($resp["title"], $title);
            $this->assertArrayHasKey("content", $resp);
            print $resp["content"];
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        } catch (PageNotFoundException $e) {
            $this->assertFalse(FALSE);
        }
    }

    /**
     * @test saveEditionTest
     */
    public function saveEditionTest() {
        $page = "prv:unfitxer";
        $id_page = str_replace(":", "_", $page);
        $title = $page;
        try {
            $resp = $this->getDokuModelAdapter()->saveEdition($page);
            $this->showParameters("saveEditionTest", $resp);
            $this->assertEquals($resp['id'], $id_page);
            $this->assertEquals($resp["ns"], $page);
            $this->assertEquals($resp["title"], $title);
            $this->assertArrayHasKey("content", $resp);
            print $resp["content"];
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        } catch (PageNotFoundException $e) {
            $this->assertFalse(TRUE);
        }

        $page = "noexisteix";
        $id_page = str_replace(":", "_", $page);
        $title = $page;
        try {
            $resp = $this->getDokuModelAdapter()->saveEdition($page);
            $this->assertEquals($resp['id'], $id_page);
            $this->assertEquals($resp["ns"], $page);
            $this->assertEquals($resp["title"], $title);
            $this->assertArrayHasKey("content", $resp);
            print $resp["content"];
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        } catch (PageNotFoundException $e) {
            $this->assertFalse(FALSE);
        }
    }

    /**
     * @test isDeniedTest
     */
    public function isDeniedTest() {
        $page = "prv:unfitxer";
        try {
            $this->getDokuModelAdapter()->saveEdition($page);
            $resp = $this->getDokuModelAdapter()->isDenied();
            print "isDeniedTest\n";
            print $resp . "\n";
            $this->assertFalse($resp); //ES Correcte?
            //$this->assertTrue($resp);
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        }
        
        //FALTARIA EL CAS DE FITXER DENEGAT?
    }

    /**
     * @test getMediaFileNameTest
     */
    public function getMediaFileNameTest() {
        global $conf;
        $page = "common:cc.png";
        $id_page = str_replace(":", "/", $page);
        try {
            $resp = $this->getDokuModelAdapter()->getMediaFileName($page);
            $this->assertEquals($resp, $conf['mediadir'].'/'.$id_page);
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        }
    }

    /**
     * @test getIdWithoutNsTest
     */
    public function getIdWithoutNsTest() {
        $page = "prv:unfitxer";
        $pos = strrpos($page, ':');
        if ($pos !== false) {
            $idWithOutNs = substr($page, $pos + 1);
        } else {
            $idWithOutNs = $page;
        }
        
        try {
            $resp = $this->getDokuModelAdapter()->getIdWithoutNs($page);
            $this->assertEquals($resp, $idWithOutNs);
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        }
    }

    
    /**
     * @test getMediaListTest
     */
    public function getMediaListTest() {
        $page = "common";
        $mediaFile="cc.png";
        try {
            $resp = $this->getDokuModelAdapter()->getMediaList($page);
            $this->showParameters("getmedialist", $resp);
            $this->assertEquals($resp[0], $mediaFile);
        } catch (PHPUnit_Framework_Exception $e) {
            $this->assertFalse(TRUE);
        }
    }
    
    
    /**
     * @test imagePathToIdTest
     */
    public function imagePathToIdTest() {
        //TODO
    }
}
